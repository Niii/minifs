diff -ru cairo-1.9.6/src/cairo-deprecated.h libcairo/src/cairo-deprecated.h
--- cairo-1.9.6/src/cairo-deprecated.h	2010-02-19 18:38:42.000000000 +0000
+++ libcairo/src/cairo-deprecated.h	2010-03-21 14:14:21.000000000 +0000
@@ -48,7 +48,7 @@
  * completely implemented. So while this format value is currently
  * deprecated, it may eventually acquire complete support in the future.
  */
-#define CAIRO_FORMAT_RGB16_565 4
+/* #define CAIRO_FORMAT_RGB16_565 4 */
 
 #define CAIRO_FONT_TYPE_ATSUI CAIRO_FONT_TYPE_QUARTZ
 
--- cairo-1.9.6/src/cairo-image-surface.c	2010-02-19 18:38:42.000000000 +0000
+++ libcairo/src/cairo-image-surface.c	2010-03-21 14:16:13.000000000 +0000
@@ -86,8 +86,10 @@
 	return CAIRO_FORMAT_A8;
     case PIXMAN_a1:
 	return CAIRO_FORMAT_A1;
+    case PIXMAN_r5g6b5:
+	return CAIRO_FORMAT_RGB16_565;
     case PIXMAN_a8b8g8r8: case PIXMAN_x8b8g8r8: case PIXMAN_r8g8b8:
-    case PIXMAN_b8g8r8:   case PIXMAN_r5g6b5:   case PIXMAN_b5g6r5:
+    case PIXMAN_b8g8r8:   case PIXMAN_b5g6r5:
     case PIXMAN_a1r5g5b5: case PIXMAN_x1r5g5b5: case PIXMAN_a1b5g5r5:
     case PIXMAN_x1b5g5r5: case PIXMAN_a4r4g4b4: case PIXMAN_x4r4g4b4:
     case PIXMAN_a4b4g4r4: case PIXMAN_x4b4g4r4: case PIXMAN_r3g3b2:
@@ -276,6 +278,9 @@
     case CAIRO_FORMAT_RGB24:
 	ret = PIXMAN_x8r8g8b8;
 	break;
+    case CAIRO_FORMAT_RGB16_565:
+	ret = PIXMAN_r5g6b5;
+	break;
     case CAIRO_FORMAT_ARGB32:
     default:
 	ret = PIXMAN_a8r8g8b8;
@@ -637,6 +642,8 @@
 	return CAIRO_CONTENT_COLOR_ALPHA;
     case CAIRO_FORMAT_RGB24:
 	return CAIRO_CONTENT_COLOR;
+    case CAIRO_FORMAT_RGB16_565:
+	return CAIRO_CONTENT_COLOR;
     case CAIRO_FORMAT_A8:
     case CAIRO_FORMAT_A1:
 	return CAIRO_CONTENT_ALPHA;
@@ -654,6 +661,8 @@
 	return 32;
     case CAIRO_FORMAT_RGB24:
 	return 32;
+    case CAIRO_FORMAT_RGB16_565:
+	return 16;
     case CAIRO_FORMAT_A8:
 	return 8;
     case CAIRO_FORMAT_A1:
@@ -4372,8 +4381,15 @@
 	    return image->transparency = CAIRO_IMAGE_HAS_ALPHA;
     }
 
-    if (image->format != CAIRO_FORMAT_ARGB32)
-	return image->transparency = CAIRO_IMAGE_HAS_ALPHA;
+    if (image->format == CAIRO_FORMAT_RGB16_565) {
+	image->transparency = CAIRO_IMAGE_IS_OPAQUE;
+	return CAIRO_IMAGE_IS_OPAQUE;
+    }
+
+    if (image->format != CAIRO_FORMAT_ARGB32) {
+	image->transparency = CAIRO_IMAGE_HAS_ALPHA;
+	return CAIRO_IMAGE_HAS_ALPHA;
+    }
 
     image->transparency = CAIRO_IMAGE_IS_OPAQUE;
     for (y = 0; y < image->height; y++) {
--- cairo-1.9.6/src/cairo-xlib-display.c	2010-02-19 18:38:42.000000000 +0000
+++ libcairo/src/cairo-xlib-display.c	2010-03-21 14:14:21.000000000 +0000
@@ -591,11 +591,31 @@
 	    pict_format = PictStandardA8; break;
 	case CAIRO_FORMAT_RGB24:
 	    pict_format = PictStandardRGB24; break;
+	case CAIRO_FORMAT_RGB16_565: {
+	    Visual *visual = NULL;
+	    Screen *screen = DefaultScreenOfDisplay(display->display);
+	    int j;
+	    for (j = 0; j < screen->ndepths; j++) {
+	        Depth *d = &screen->depths[j];
+	        if (d->depth == 16 && d->nvisuals && &d->visuals[0]) {
+	            if (d->visuals[0].red_mask   == 0xf800 &&
+	                d->visuals[0].green_mask == 0x7e0 &&
+	                d->visuals[0].blue_mask  == 0x1f)
+	                visual = &d->visuals[0];
+	            break;
+	        }
+	    }
+	    if (!visual)
+	        return NULL;
+	    xrender_format = XRenderFindVisualFormat(display->display, visual);
+	    break;
+	}
 	default:
 	    ASSERT_NOT_REACHED;
 	case CAIRO_FORMAT_ARGB32:
 	    pict_format = PictStandardARGB32; break;
 	}
+  if (!xrender_format)
 	xrender_format = XRenderFindStandardFormat (display->display,
 		                                    pict_format);
 	display->cached_xrender_formats[format] = xrender_format;
--- cairo-1.9.6/src/cairo-xlib-private.h	2010-02-19 18:38:32.000000000 +0000
+++ libcairo/src/cairo-xlib-private.h	2010-03-21 14:17:42.000000000 +0000
@@ -77,6 +77,8 @@
     cairo_reference_count_t ref_count;
     cairo_mutex_t mutex;
 
+    XRenderPictFormat *cached_xrender_formats[CAIRO_FORMAT_RGB16_565 + 1];
+
     cairo_xlib_display_t *display;
     Screen *screen;
     cairo_bool_t has_render;
--- cairo-1.9.6/src/cairo.h	2010-02-19 18:38:42.000000000 +0000
+++ libcairo/src/cairo.h	2010-03-21 14:14:21.000000000 +0000
@@ -2260,11 +2260,8 @@
     CAIRO_FORMAT_ARGB32,
     CAIRO_FORMAT_RGB24,
     CAIRO_FORMAT_A8,
-    CAIRO_FORMAT_A1
-    /* The value of 4 is reserved by a deprecated enum value.
-     * The next format added must have an explicit value of 5.
-    CAIRO_FORMAT_RGB16_565 = 4,
-    */
+    CAIRO_FORMAT_A1,
+    CAIRO_FORMAT_RGB16_565
 } cairo_format_t;
 
 cairo_public cairo_surface_t *
--- cairo-1.9.6/src/cairoint.h	2010-02-19 18:38:42.000000000 +0000
+++ libcairo/src/cairoint.h	2010-03-21 14:14:21.000000000 +0000
@@ -2149,7 +2149,7 @@
  * in cairo-xlib-surface.c--again see -Wswitch-enum).
  */
 #define CAIRO_FORMAT_INVALID ((unsigned int) -1)
-#define CAIRO_FORMAT_VALID(format) ((format) <= CAIRO_FORMAT_A1)
+#define CAIRO_FORMAT_VALID(format) ((format) <= CAIRO_FORMAT_RGB16_565)
 
 /* pixman-required stride alignment in bytes. */
 #define CAIRO_STRIDE_ALIGNMENT (sizeof (uint32_t))
